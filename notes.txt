Blog post: https://realpython.com/blog/python/token-based-authentication-with-flask/

Token-Based Auth with Flask

Obectives
  By the end of this tutorial you will be able to...

    1. Discuss the benefits of using JWTs vs sessions and cookies for authentication
    2. Implement user authentication with JWTs
    3. Blacklist user tokens when necessary
    4. Write tests to create and verify JWTs and add user authentication
    5. Practive test-driven development

Introduction
  JSON Web Tokens (or JWTs) provide a means of transmitting information from the client to the server in a stateless, secure way.

  On the server, JWTs are generated by signing user information via a secret key, which are then securely stored on the client. This form of auth works well with modern, single page applications. For more on this, along with the pros and cons of using JWTs vs. session and cookie-based auth, please read the following articles:
    * some articles

  Note: Keep in mind that since a JWT is signed rather than encryted it should never contain sensitive information like a user's password.

Getting Started
  Project Setup
    Start by cloning the project boilerplate and then create a new branch:

      <clone>

    Create and active a virtualenv and install the dependencies:

      $ python3.6 -m venv env
      $ source env/bin/activate
      (env)$ pip install -r requirements.txt

    This is optional, but it's a good idea to create a new GitHub repo and update the remote.

  Database Setup
    Let's set up Postgres.

    Note: If you're on a Mac, check out Postgres app.

    export path (need to automate this)
    ************************************
    export PATH="/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH"

    Once the Postgres server is running, create two new databases from psql that share the same name as your project name:

      (env)$ psql

